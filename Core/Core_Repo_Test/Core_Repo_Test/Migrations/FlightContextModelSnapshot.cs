// <auto-generated />
using System;
using Core_Repo_Test.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core_Repo_Test.Migrations
{
    [DbContext(typeof(FlightContext))]
    partial class FlightContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core_Repo_Test.Models.City", b =>
                {
                    b.Property<long>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CityID"));

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FlightsFlightID")
                        .HasColumnType("bigint");

                    b.HasKey("CityID");

                    b.HasIndex("FlightsFlightID");

                    b.ToTable("CityTbl");
                });

            modelBuilder.Entity("Core_Repo_Test.Models.Facility", b =>
                {
                    b.Property<long>("FacilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FacilityID"));

                    b.Property<string>("FacilityDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FacilityID");

                    b.ToTable("FacilityTbl");
                });

            modelBuilder.Entity("Core_Repo_Test.Models.FlightFacilities", b =>
                {
                    b.Property<long>("FlightFeatureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FlightFeatureID"));

                    b.Property<long>("FacilityID")
                        .HasColumnType("bigint");

                    b.Property<long>("FlightID")
                        .HasColumnType("bigint");

                    b.HasKey("FlightFeatureID");

                    b.HasIndex("FacilityID")
                        .IsUnique();

                    b.HasIndex("FlightID")
                        .IsUnique();

                    b.ToTable("FacilitiesTbl");
                });

            modelBuilder.Entity("Core_Repo_Test.Models.Flights", b =>
                {
                    b.Property<long>("FlightID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FlightID"));

                    b.Property<long>("CityID")
                        .HasColumnType("bigint");

                    b.Property<long>("DestinationCityID")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Fair")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FlightNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDirect")
                        .HasColumnType("bit");

                    b.Property<long>("SourceCityID")
                        .HasColumnType("bigint");

                    b.Property<long>("TravelTime")
                        .HasColumnType("bigint");

                    b.HasKey("FlightID");

                    b.ToTable("FlightsTbl");
                });

            modelBuilder.Entity("Core_Repo_Test.Models.City", b =>
                {
                    b.HasOne("Core_Repo_Test.Models.Flights", null)
                        .WithMany("City")
                        .HasForeignKey("FlightsFlightID");
                });

            modelBuilder.Entity("Core_Repo_Test.Models.FlightFacilities", b =>
                {
                    b.HasOne("Core_Repo_Test.Models.Facility", "Facilities")
                        .WithOne("FlightFacilities")
                        .HasForeignKey("Core_Repo_Test.Models.FlightFacilities", "FacilityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core_Repo_Test.Models.Flights", "Flights")
                        .WithOne("FlightFacilities")
                        .HasForeignKey("Core_Repo_Test.Models.FlightFacilities", "FlightID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facilities");

                    b.Navigation("Flights");
                });

            modelBuilder.Entity("Core_Repo_Test.Models.Facility", b =>
                {
                    b.Navigation("FlightFacilities");
                });

            modelBuilder.Entity("Core_Repo_Test.Models.Flights", b =>
                {
                    b.Navigation("City");

                    b.Navigation("FlightFacilities");
                });
#pragma warning restore 612, 618
        }
    }
}
