// <auto-generated />
using System;
using Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entity.Migrations
{
    [DbContext(typeof(CompanyContext))]
    [Migration("20240829030231_drtbl")]
    partial class drtbl
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Admin", b =>
                {
                    b.Property<long>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AdminID"));

                    b.Property<string>("EmailID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminID");

                    b.ToTable("AdminTbl");

                    b.HasData(
                        new
                        {
                            AdminID = 1L,
                            EmailID = "manoj@hotmail.com",
                            FirstName = "Manoj",
                            LastName = "Patil",
                            Password = "abcd"
                        });
                });

            modelBuilder.Entity("Core.Area", b =>
                {
                    b.Property<long>("AreaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AreaID"));

                    b.Property<string>("AreaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CityID")
                        .HasColumnType("bigint");

                    b.HasKey("AreaID");

                    b.HasIndex("CityID");

                    b.ToTable("AreaTbl");
                });

            modelBuilder.Entity("Core.BookedAppPayment", b =>
                {
                    b.Property<long>("BookedAppPaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BookedAppPaymentID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("BookedAppointmentsID")
                        .HasColumnType("bigint");

                    b.Property<int>("PaymentMode")
                        .HasColumnType("int");

                    b.HasKey("BookedAppPaymentID");

                    b.HasIndex("BookedAppointmentsID");

                    b.ToTable("BookedAppPaymentTbl");
                });

            modelBuilder.Entity("Core.BookedAppointments", b =>
                {
                    b.Property<long>("BookedAppointmentsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BookedAppointmentsID"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("DoctorClinicSessionID")
                        .HasColumnType("bigint");

                    b.Property<string>("EndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("IsPaid")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientID")
                        .HasColumnType("bigint");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookedAppointmentsID");

                    b.HasIndex("DoctorClinicSessionID");

                    b.HasIndex("PatientID");

                    b.ToTable("BookedAppointmentsTbl");
                });

            modelBuilder.Entity("Core.City", b =>
                {
                    b.Property<long>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CityID"));

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StateID")
                        .HasColumnType("bigint");

                    b.HasKey("CityID");

                    b.HasIndex("StateID");

                    b.ToTable("CityTbl");
                });

            modelBuilder.Entity("Core.Clinic", b =>
                {
                    b.Property<long>("ClinicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ClinicID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CityID")
                        .HasColumnType("bigint");

                    b.Property<string>("ClinicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LandLineNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClinicID");

                    b.HasIndex("CityID");

                    b.ToTable("ClinicTbl");
                });

            modelBuilder.Entity("Core.ClinicCertificate", b =>
                {
                    b.Property<long>("ClinicCertificateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ClinicCertificateID"));

                    b.Property<DateTime>("CertificateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CertificateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ClinicID")
                        .HasColumnType("bigint");

                    b.HasKey("ClinicCertificateID");

                    b.HasIndex("ClinicID");

                    b.ToTable("ClinicCertificateTbl");
                });

            modelBuilder.Entity("Core.ClinicFacility", b =>
                {
                    b.Property<long>("ClinicFacilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ClinicFacilityID"));

                    b.Property<long>("ClinicID")
                        .HasColumnType("bigint");

                    b.Property<string>("FacilityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClinicFacilityID");

                    b.HasIndex("ClinicID");

                    b.ToTable("ClinicFacilityTbl");
                });

            modelBuilder.Entity("Core.ClinicRating", b =>
                {
                    b.Property<long>("ClinicRatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ClinicRatingID"));

                    b.Property<long>("ClinicID")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ClinicRatingID");

                    b.HasIndex("ClinicID");

                    b.HasIndex("UserID");

                    b.ToTable("ClinicRatingTbl");
                });

            modelBuilder.Entity("Core.Country", b =>
                {
                    b.Property<long>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CountryID"));

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryID");

                    b.ToTable("CountryTbl");
                });

            modelBuilder.Entity("Core.Doctor", b =>
                {
                    b.Property<long>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DoctorID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AreaID")
                        .HasColumnType("bigint");

                    b.Property<string>("DoctorExperience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorQualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorID");

                    b.HasIndex("AreaID");

                    b.ToTable("DoctorTbl");
                });

            modelBuilder.Entity("Core.DoctorClinicSession", b =>
                {
                    b.Property<long>("DoctorClinicSessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DoctorClinicSessionID"));

                    b.Property<long>("ClinicID")
                        .HasColumnType("bigint");

                    b.Property<long>("DoctorID")
                        .HasColumnType("bigint");

                    b.Property<string>("EndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OpdSessionID")
                        .HasColumnType("bigint");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeInterval")
                        .HasColumnType("int");

                    b.HasKey("DoctorClinicSessionID");

                    b.HasIndex("ClinicID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("OpdSessionID");

                    b.ToTable("DoctorClinicSessionTbl");
                });

            modelBuilder.Entity("Core.DoctorRating", b =>
                {
                    b.Property<long>("DoctorRatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DoctorRatingID"));

                    b.Property<long>("DoctorID")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("DoctorRatingID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("UserID");

                    b.ToTable("DoctorRatingTbl");
                });

            modelBuilder.Entity("Core.DoctorSpeciality", b =>
                {
                    b.Property<long>("DoctorSpecilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DoctorSpecilityID"));

                    b.Property<long>("DoctorID")
                        .HasColumnType("bigint");

                    b.Property<long>("SpecilityID")
                        .HasColumnType("bigint");

                    b.HasKey("DoctorSpecilityID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("SpecilityID");

                    b.ToTable("DoctorSpecialityTbl");
                });

            modelBuilder.Entity("Core.OPDSession", b =>
                {
                    b.Property<long>("OpdSessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OpdSessionID"));

                    b.Property<long>("ClinicID")
                        .HasColumnType("bigint");

                    b.Property<string>("SessionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OpdSessionID");

                    b.HasIndex("ClinicID");

                    b.ToTable("OPDSessionTbl");
                });

            modelBuilder.Entity("Core.Patient", b =>
                {
                    b.Property<long>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PatientID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("PatientID");

                    b.HasIndex("UserID");

                    b.ToTable("PatientTbl");
                });

            modelBuilder.Entity("Core.Specility", b =>
                {
                    b.Property<long>("SpecilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SpecilityID"));

                    b.Property<string>("SpecilityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecilityID");

                    b.ToTable("SpecilityTbl");
                });

            modelBuilder.Entity("Core.State", b =>
                {
                    b.Property<long>("StateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StateID"));

                    b.Property<long>("CountryID")
                        .HasColumnType("bigint");

                    b.Property<string>("StateName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StateID");

                    b.HasIndex("CountryID");

                    b.ToTable("StateTbl");
                });

            modelBuilder.Entity("Core.User", b =>
                {
                    b.Property<long>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CountryID")
                        .HasColumnType("bigint");

                    b.Property<string>("EmailID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("CountryID");

                    b.ToTable("UserTbl");
                });

            modelBuilder.Entity("Core.Area", b =>
                {
                    b.HasOne("Core.City", "City")
                        .WithMany("Area")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Core.BookedAppPayment", b =>
                {
                    b.HasOne("Core.BookedAppointments", "BookedAppointments")
                        .WithMany("BookedAppPayment")
                        .HasForeignKey("BookedAppointmentsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BookedAppointments");
                });

            modelBuilder.Entity("Core.BookedAppointments", b =>
                {
                    b.HasOne("Core.DoctorClinicSession", "DoctorClinicSession")
                        .WithMany("BookedAppointments")
                        .HasForeignKey("DoctorClinicSessionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Patient", "Patient")
                        .WithMany("BookedAppointments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DoctorClinicSession");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Core.City", b =>
                {
                    b.HasOne("Core.State", "States")
                        .WithMany("Cities")
                        .HasForeignKey("StateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("States");
                });

            modelBuilder.Entity("Core.Clinic", b =>
                {
                    b.HasOne("Core.City", "City")
                        .WithMany("Clinic")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Core.ClinicCertificate", b =>
                {
                    b.HasOne("Core.Clinic", "Clinic")
                        .WithMany("ClinicCertificates")
                        .HasForeignKey("ClinicID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Core.ClinicFacility", b =>
                {
                    b.HasOne("Core.Clinic", "Clinic")
                        .WithMany("ClinicFacilities")
                        .HasForeignKey("ClinicID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Core.ClinicRating", b =>
                {
                    b.HasOne("Core.Clinic", "Clinic")
                        .WithMany("ClinicRatings")
                        .HasForeignKey("ClinicID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.User", "User")
                        .WithMany("ClinicRatings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Doctor", b =>
                {
                    b.HasOne("Core.Area", "Area")
                        .WithMany("Doctors")
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Core.DoctorClinicSession", b =>
                {
                    b.HasOne("Core.Clinic", "Clinic")
                        .WithMany("DoctorClinicSessions")
                        .HasForeignKey("ClinicID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Doctor", "Doctor")
                        .WithMany("DoctorClinicSessions")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.OPDSession", "OPDSession")
                        .WithMany("DoctorClinicSessions")
                        .HasForeignKey("OpdSessionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Doctor");

                    b.Navigation("OPDSession");
                });

            modelBuilder.Entity("Core.DoctorRating", b =>
                {
                    b.HasOne("Core.Doctor", "Doctor")
                        .WithMany("DoctorRatings")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.User", "User")
                        .WithMany("DoctorRatings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.DoctorSpeciality", b =>
                {
                    b.HasOne("Core.Doctor", "Doctor")
                        .WithMany("DoctorSpecialities")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Specility", "Specility")
                        .WithMany("DoctorSpecialities")
                        .HasForeignKey("SpecilityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Specility");
                });

            modelBuilder.Entity("Core.OPDSession", b =>
                {
                    b.HasOne("Core.Clinic", "Clinic")
                        .WithMany("OPDSessions")
                        .HasForeignKey("ClinicID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Core.Patient", b =>
                {
                    b.HasOne("Core.User", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.State", b =>
                {
                    b.HasOne("Core.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Core.User", b =>
                {
                    b.HasOne("Core.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Core.Area", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Core.BookedAppointments", b =>
                {
                    b.Navigation("BookedAppPayment");
                });

            modelBuilder.Entity("Core.City", b =>
                {
                    b.Navigation("Area");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Core.Clinic", b =>
                {
                    b.Navigation("ClinicCertificates");

                    b.Navigation("ClinicFacilities");

                    b.Navigation("ClinicRatings");

                    b.Navigation("DoctorClinicSessions");

                    b.Navigation("OPDSessions");
                });

            modelBuilder.Entity("Core.Country", b =>
                {
                    b.Navigation("States");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Doctor", b =>
                {
                    b.Navigation("DoctorClinicSessions");

                    b.Navigation("DoctorRatings");

                    b.Navigation("DoctorSpecialities");
                });

            modelBuilder.Entity("Core.DoctorClinicSession", b =>
                {
                    b.Navigation("BookedAppointments");
                });

            modelBuilder.Entity("Core.OPDSession", b =>
                {
                    b.Navigation("DoctorClinicSessions");
                });

            modelBuilder.Entity("Core.Patient", b =>
                {
                    b.Navigation("BookedAppointments");
                });

            modelBuilder.Entity("Core.Specility", b =>
                {
                    b.Navigation("DoctorSpecialities");
                });

            modelBuilder.Entity("Core.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Core.User", b =>
                {
                    b.Navigation("ClinicRatings");

                    b.Navigation("DoctorRatings");

                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
